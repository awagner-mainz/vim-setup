" /***************************************************
" * Filename:    ~.vimrc
" * Description: Setup file for the editor vim
" * Author:      Andreas Wagner
" * Date:        Jun 07 2004
" * *************************************************/
" 
" viele Anregungen von Michael Prokop's vimrc übernommen
" (check out http://config.michael-prokop.at) Thanks to Michael
"  which in turn is based on the one of Sven Guckes   -->
"  http://www.guckes.net/setup/ - vimrc.forall. Thanks to Sven!
"

" In this file, there are the following sections
" - OPTIONS
" - My variables
" - ABBREVIATIONS
" - COMMANDS (+ AUTOCOMMANDS)
" - MAPPINGS
"   - Movements
"   - Appearance
"   - Buffers
"   - Saving
"   - Formatting
"   - Screen
"   - Misc
"   - Vimrc Editing
"   - Spellchecking
" - SOME DOCUMENTATION
"


" General TODO:
" Add DrChip Menu support to other thingies.
" and rename it back to DrChip again.


" =============================================================================
" OPTIONS {{{
" =============================================================================
" 
"
" in alphabetical order

set autoindent					" always set autonidenting on
set autoread					" reload if file changed on disc
set autowrite 					" saves buffer before launching shellcommands etc.
set nobackup					" don't use backups (use versions?)
if has ("gui_running")
	set background=light		" my gvim uses bright background
	colo peachpuff
else
	set background=dark			" my xterm/screen is dark.
endif
set backspace=indent,eol,start	" backspace over everything in insert mode
set cinoptions=>s,{0,}0,?0,^0,:0,=s,p0,t0,+s,(0,)20,*30
set nocompatible				" relax vi compatibility
set confirm						" ask about unsaved buffers rather than fail on quit etc.
" set digraph             		" for strange chars
set encoding=utf-8
set noerrorbells
set errorformat=%f:%l:%c:%m		" that's the way tex-wrapper reports
" set errorformat=%f:%l:%m,\"%f\"\\,\ line\ %l\:\ %m
set esckeys             		" allow cursor keys in insert mode
set foldcolumn=4			" display markers for folds in a small column of its own
set foldmethod=marker			" use braces as folding markers
" set foldtext=MyFoldText()		" TODO: Check it out!
set formatoptions=2tcq  		" format text using indentation of the second line
set history=50
set hlsearch					" highlight the last used search pattern
set grepprg=grep\ -nH\ $* 		" make grep always generate a filename
set guifont=Luxi\ Mono\ 11
set ignorecase					" ignore case in searching
set incsearch					" do incremental searching
set laststatus=2				" always have a status line (1-only if 2 or
								" more windows; 0-never)
set nojoinspaces				" have only one space when lines are joined at the end of phrases
set keywordprg=pinfo
set matchpairs=(:),{:},[:],<:>
set nomodeline
" set modeline
" set modelines=1
set mouse=a             		" mouse in all modes
" set mousefocus				" no real reason for this
set mousehide					" hides mouse after characters are typed
" set mousemodel=popup_setpos	" Right mouse button pops up a menu. Shift-left extends selection
set mousemodel=popup			" Right mouse button pops up a menu. Shift-left extends selection
set number						" number my lines
set pastetoggle=<f11>   		" toggle paste/formatting
set report=0            		" show report when >=N lines have changed (0 -> always)
set ruler						" show the cursor position all the time
set scrolloff=0         		" don't scroll in context at top/bottom of screen
set shiftround          		" indent on rounds of shiftwidth
set shiftwidth=4        		" number of spaces for autoindenting
set shortmess=aI        		" abbreviate (all) status messages and skip intro
set showcmd						" display incomplete commands
set showmatch 					" highlight matching braces
set showmode 					" display current mode
set sidescroll=1        		" scroll sideways in single-column steps
set sidescrolloff=20    		" keep large horiz. context scrolled in
set smarttab            		" chose wisely between tabwidth and indent-width
set smartindent         		" yes, do it.
set suffixes=.bak,~,.o,.h,.info,.swp,.aux,.bbl,.blg,.dvi,.idx,.lof,.log,.lot,.pdf,.ps,.toc 	" set suffixes to ignore in command-line completion
set nostartofline       		" keep cursor at column on page commands
" Statuslines
"       One favourite:
" set   statusline=[%n]\ %f\ %(\ %M%R%H)%)\=Pos=<%l\,%c%V>\ %P\=ASCII=%b\ HEX=%B)%=(c)\ Michael\ Prokop
"       My favourite statusline is:
" set statusline=%<[%n]\ %f\ %y\ %r\ %1*%m%*%w%=%(Column:\ %c%V%)%4(%)%-10(Line:\ %l%)\ %4(%)%p%%\ %P\ \ \ \ \ \ ASCII=%b\ HEX=%B\ \ \ \ \ %=(c)\ Michael\ Prokop
"
" 040519 $HOME/.vim/plugin/minibufexpl.vim - see: http://www.vim.org/scripts/script.php?script_id=159
" Thomas Winkler modified this script and wrote an own function (see below):
"
set statusline=%<\ %{GetBufferList()}\ %y\ %1*%*%w%=%(Col:\ %c%V%)%2(%)%-1(Line:\ %l/%L%)\ \ \ %p%%\ \ \ ASCII=%b\ HEX=%B\ %=

if has("terminfo")
 set t_Co=8
 set t_Sf=[3%p1%dm
 set t_Sb=[4%p1%dm
else
 set t_Co=8
 set t_Sf=[3%dm
 set t_Sb=[4%dm
endif
set tabstop=4
set tags=~/.vim/vim.tags,~/tags,./tags;/    " where are tags files
" if &term =~ "xterm"
"   set term=xterm-16color
" endif
set textwidth=78
set title               			" display information in the title
" set ttyfast             			" yes - local terminal is fast.
"       ttybuiltin: default value is on
"       When on, the builtin termcaps are searched before the external ones.
"       When off the builtin termcaps are searched after the external ones.
" set ttybuiltin
set whichwrap=b,s,<,>,[,]  			" allow cursor keys to wrap to next line
set wildcharm=<C-Z>					" define char to be used as esc in macros etc.
set wildmenu						" use navigation in tab-opened auto-completion "menus"
set wildmode=longest,list
set winminheight=0      			" don't display any lines of minimized windows
set winminwidth=0       			" the same
set writebackup


" }}}
"
" =============================================================================
" My variable settings {{{
" =============================================================================
"

let Tlist_Ctags_Cmd='/usr/local/bin/ctags'      " Taglist's variable denoting ctags executable

let g:aliases_file='~/.mutt/aliases'            " In order to work with mutt aliases in email-editing

let g:cvimsyn='~/.vim/CVIMSYN'    " for engspchk/gerspchk dictionaries
let g:spchklang='ger'							" for engspchk/gerspchk language selection
let g:spchksilent=1								" suppress sourcing and loading messages

let spell_language_list="german,english,francais"   " vimspell languages
" let spell_german_tex_iskeyword = "34,~,|,-"     " characters occuring inside of words
let spell_auto_type=''                          " don't auto-spell
let spell_insert_mode=0							" setting this to one enables on-the-fly 
												" spellchecking in insert mode, remapping
												" <space> key
nmap \sc <Plug>SpellCheck						" use \sc to check instead of \ss
let spell_accept_map = "<Leader>ss"				" use \ss to save a word to user dict.
let spell_case_accept_map = "<Leader>sS"		" use \sS to save a word case-sensitively
nmap \sa <Plug>SpellProposeAlternatives			" use \sa to suggest alt. instead of \s?
let spell_ignore_map = "<Leader>st"				" use \st to temporarily ignore a spelling.

" }}}
" 
" =============================================================================
" Abbreviations {{{
" =============================================================================
"

"  Moved the abbreviations *before* the mappings as
"  some of the abbreviations get used with some mappings.
"
"  Let's start of with some standard strings
"  like the alphabet and the digits:
"
"     Yalpha : The lower letter alphabet.
  iab Yalpha abcdefghijklmnopqrstuvwxyz
"
"     YALPHA : The upper letter alphabet.
  iab YALPHA ABCDEFGHIJKLMNOPQRSTUVWXYZ
"
"     Ydigit: The ten digits.
  iab Ydigit  1234567890
"
"     Yruler: A "ruler" - nice for counting the length of words.
  iab Yruler  1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890

" Abbreviations for some important numbers:
  iab Npi 3.1415926535897932384626433832795028841972
  iab Ne  2.7182818284590452353602874713526624977573

" Abbreviations for some classic long words:
" and now a word with all three umlauts and the 'ß', too:
  iab YHRA "Heizölrückstoßabdämpfung"
"
"     Phrases.
"     Yanfs: Changing the Subject within a message.  (Hi, Monty Python!)
  iab Yanfs  And now for something completely different...

"     Ybtdt:  It's been dejavu all over again.
  iab Ybtdt   Been there, done that, got the tshirt.

"     Ywyot:  people who use the browser for email and news...
  iab Ywyot when your only tool is a hammer - every problem looks like a nail.

" classic pangrams (which include every letter of the alphabet):
  iab Ypangram Bei jedem klugen Wort von Sokrates rief Xanthippe zynisch: Quatsch!

" Inserting an ellipsis to indicate deleted text
"  iab  Yell  [...]
  iab  Yel  [...]<CR>

" Use when posting in newsgroup or writing mail-replies
  iab  Ysc <ESC>o[schnipp]<CR><ESC>k$i
"  vmap ,ell c[...]<ESC>

" now some "autocorrection"...
"
" some words I type often enough:
  iab Latex     LaTeX
  iab latex     LaTeX
  iab Tex       TeX
  iab eig       eigentlich
  iab insb      insbesondere
  iab led       lediglich
  iab merkw     merkwürdig
  iab mitt      mittlerweile
  iab sicherl   sicherlich
  iab sog       sogenannt
  iab viell     vielleicht

" typing smileys slows me down..
  iab BAH :-(
  iab SMILE :-)
  iab WINK  ;-)

" Correcting some typos.
  iab alos      also
  iab aslo      also
  iab acuh      auch
  iab bracuht   braucht
  iab doer      oder
  iab nciht     nicht
  iab SIe       Sie
  iab ICh       Ich
  iab Addresse	Adresse	
  iab aggressiv	agressiv	

" Often used filenames - only needed these on the command line:
  cab Mrc       ~/.mutt/main
  cab Vrc 	~/.vim/.vimrc

" }}}
"
" =============================================================================
" COMMANDS {{{
" =============================================================================
"

"  Source general files -------------------------------------------------------
source /usr/share/vim/current/menu.vim
source /usr/share/vim/current/syntax/syntax.vim


filetype plugin on 		" launch plugins based on filetype
filetype indent on 		" indent based on filetype


" =============================================================================
"  AUTOCOMMANDS 
" =============================================================================

" init empty
autocmd!

" For all text files set 'textwidth' to 78 characters.
autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif


" =============================================================================
" SYNTAX HIGHLIGHTING ON
" =============================================================================

syntax on		" Add syntax highlighting



" }}}
"
" =============================================================================
" MAPPINGS {{{
" =============================================================================
"
" mapping commands: {{{
" :map		Normal, Visual and Operator-pending
" :vmap		Visual
" :nmap		Normal
" :omap		Operator-pending
" :map!		Insert and Command-line
" :imap		Insert
" :cmap		Command-line

" :noremap	Normal, Visual and Operator-pending
" :vnoremap	Visual
" :nnoremap	Normal
" :onoremap	Operator-pending
" :noremap!	Insert and Command-line
" :inoremap	Insert

" }}}
"
" -----------------------------------------------------------------------------
" MOVEMENTS {{{
" -----------------------------------------------------------------------------
"

" remap escape key to <jj> so it can be typed faster
  imap jj <esc>

" in normal mode, use backspace to go a word backwards
  nmap  b

" let "G" go to the END of the last line
  map G G$

" move to the next on-screen line on wrapped lines
imap <silent> <Down> <C-O>gj
imap <silent> <Up> <C-O>gk
nmap <silent> <Down> gj
nmap <silent> <Up> gk

" windows navigation - - - - - - - - - - - 
" move between split windows with <Ctrl-j> and <Ctrl-k> (horiz.) and <Ctrl-h>, <Ctrl-l> (vert.)
 map <C-H> <C-W>h
 map <C-J> <C-W>j
 map <C-K> <C-W>k
 map <C-L> <C-W>l
imap <C-H> <ESC><C-W>h
imap <C-J> <ESC><C-W>j
imap <C-K> <ESC><C-W>k
imap <C-L> <ESC><C-W>l

" or do it with Alt-Arrow keys
 map <silent> <M-Up> :wincmd k<CR> 
 map <silent> <M-Down> :wincmd j<CR> 
 map <silent> <M-Left> :wincmd h<CR> 
 map <silent> <M-Right> :wincmd l<CR>
imap <silent> <M-Up> <ESC>:wincmd k<CR> 
imap <silent> <M-Down> <ESC>:wincmd j<CR> 
imap <silent> <M-Left> <ESC>:wincmd h<CR> 
imap <silent> <M-Right> <ESC>:wincmd l<CR>

" Buffers  - - - - - - - - - - - - - - - - - - - -
"
  map <C-N> <ESC>:next <CR>
  map <C-P> <ESC>:prev <CR>

" - - - - - - - - - - - - - - - - - - - - - - - - 
" move back in history with <C-[>
" nmap <C-[> <C-O>			" breaks insert and cursor keys somehow - FIXME.

" - - - - - - - - - - - - - - - - - - - - - - - - 
" mode search for visually selected text with <g/> (forward) and <g?> (backw.)
function! VsearchPatternSave()
   let l:temp = @@
   normal gvy
   let @/ = substitute(escape(@@, '/'), "\n", "\\\\n", "g")
   let @@ = l:temp
   unlet l:temp
endfunction
vmap g/ :call VsearchPatternSave()<CR>/<C-R>/<CR>
vmap g? :call VsearchPatternSave()<CR>?<C-R>/<CR>

" }}}
"
" -----------------------------------------------------------------------------
" APPEARANCE {{{
" -----------------------------------------------------------------------------
"

"  F11 toggles Paste in Insert mode (see above, set pastetoggle)

" ,wrp toggles wrapping TODO: make this affect sidescroll settings.
  map ,wrp :set wrap!<CR>

" Switch between nlsearch and nohlsearc
  map ,hl :set invhlsearch<CR>

"     Make whitespace visible (TODO: make it toggle):
"     Sws = show whitespace
"  nmap ,sws :%s/ /_/g<C-M>
"  vmap ,sws :%s/ /_/g<C-M>
"
"     Sometimes you just want to *see* that trailing whitespace (TODO: make it toggle):
"     Stws = show trailing whitespace
"  nmap ,stws :%s/  *$/_/g<C-M>
"  vmap ,stws :%s/  *$/_/g<C-M>
"  map ,stws :set hls!<CR>

" Paralleles Editieren TODO: FIXME
" map <C-P> :vsplit<CR><C-M>:bn<CR><C-M>:set scrollbind<CR><C-M><C-W><C-W>:set scrollbind<CR><C-M><C-W><C-W>

" Set background dark. TODO: Switch dark/light
  map ,bg :if &background=="light"<CR>:set background=dark<CR>:else<CR>:set background=light<CR>:endif<CR><CR>

" Highlight always some keywords
  syn keyword TODO FIXME XXX

" Folds ------------------------------------------------------------------------

" Toggle fold state between closed and opened. 
" 
" If there is no fold at current line, just moves forward. 
" If it is present, reverse it's state. 
fun! ToggleFold()
  if foldlevel('.') == 0
    normal! l
  else
    if foldclosed('.') < 0
      . foldclose
    else
      . foldopen
    endif
  endif
  " Clear status line
  echo
endfun
" Map this function to Space key.
nnoremap <space> :call ToggleFold()<CR>

" or like this:
nnoremap  <silent>  <space> :exe 'silent! normal! za'.(foldlevel('.')?'':'l')<CR>

" fold an entire block of code
"  map ,f v%zf

" This will select a whole line of text or it will select everything in a fold. 
  nmap ,y <S-v>y 

" in-/decrease foldlevel (zoom out/in)
  map  ,zo          :set foldlevel-=1<CR>
  map  ,zi          :set foldlevel+=1<CR>

" TODO: Map something to save the foldview
" :mkview

" TODO: Map something to restore the foldview
" :loadview

" TODO: FIXME
function! MyFoldText()
  let line = getline(v:foldstart)
  let vlines = v:foldendline-v:foldstartline
  let sub = substitute(line, '/\*\|\*/\|{{{\d\=', '', 'g')		" }}}
  return  sub . "level: " . v:foldlevel . " [" . v:foldstartline . "-" .
			  \ v:foldendline . " (" . vlines . "lines)]"
endfunction

" TODO: move the following to mail-filetype-plugin:
" set foldmethod=expr
" set foldexpr=strlen(substitute(substitute(getline(v:lnum),'\\s','',\"g\"),'[^>].*','',''))
"
" You can try it out on this text:
"
" > quoted text he wrote
" > quoted text he wrote
" > > double quoted text I wrote
" > > double quoted text I wrote
"
" Explanation for the 'foldexpr' used in the example (inside out):
"  getline(v:lnum)gets the current line
"  substitute(...,'\\s','','g')removes all white space from the line
"  substitute(...,'[^>].*','',''))removes everything after leading '>'s
"  strlen(...)counts the length of the string, which is the number of '>'s found
"
" Note that a backslash must be inserted before every space, double quote and
" backslash for the ":set" command.  If this confuses you, do
"  set foldexpr
"
" to check the actual resulting value.  To correct a complicated expression, use the command-line completion:
"  set foldexpr=<Tab>
" Where <Tab> is a real Tab.  Vim will fill in the previous value, which you can then edit.
"	    
" When the expression gets more complicated you should put it in a function and set 'foldexpr' to call that function.
	    
" ------------------------------------------------------------------------------

" use VV to display VIMRUNTIME (which :version doesn't do)
  nmap VV :echo $VIMRUNTIME<C-M>

" map <F9> :emenu <C-Z>

" }}}
"
" -----------------------------------------------------------------------------
" BUFFERS {{{
" -----------------------------------------------------------------------------
"


" }}}
"
" -----------------------------------------------------------------------------
" SAVING {{{
" -----------------------------------------------------------------------------
"

" When I let Vim write the current buffer I frequently mistype the
" command ":w" as ":W" - so I have to remap it to correct this typo:
nmap :W :w
nmap :W! :w!

" just so with q
nmap :Q :q
nmap :Q! :q!


" save with <Ctrl-S>
if has("gui_running")
 	map <silent> <C-S> :if expand("%") == ""<CR>:browse confirm W<CR>:else<CR>:confirm W<CR>:endif<CR>
	imap <silent> <C-S> <ESC><C-S>i
else
	map <silent> <C-S> :w<CR>
	imap <silent> <C-S> <ESC><C-S>i
endif

" Save function for interaction with ROX-savebox
" unmapped as of yet
function! Save()
 let tmpname = tempname()
 let fname = expand('%')
 if fname == ''
      let fname = 'TextFile'
 endif
 silent exec 'write !savebox ' . fname . ' &gt; ' . tmpname
 let newname = system('cat ' . tmpname)
 let tmp = system('rm ' . tmpname)
 if tmpname != ''
      exec 'file ' . escape(newname, ' ')
      set nomodified
 endif
endfunction
command! Save call Save()
" map <F3> :Save<CR>


" }}}
"
" -----------------------------------------------------------------------------
" FORMATTING {{{
" -----------------------------------------------------------------------------
"

" Paragraph auto-formatting - - - - - - - - - - - - - - - - - - - - - - -

" Format current paragraph with Ctrl-Q and go back to previous position.
" It inserts CTRL-Z at the current position to enable to rebound to the
" previous position within the text.  [Hello, Y. K. Puckett!]
 map <C-Q> i<C-Z><esc>gqip?<C-Z><CR>x
imap <C-Q>  <C-Z><esc>gqip?<C-Z><CR>xi
  
" reformat the paragraph taking textwidth from current cursor position
" map ,tw :set textwidth=<C-R>=col(".")<CR><C-Q>
" TODO: test my remembering version
 map ,tw :let temptw=&tw<CR>:set tw=<C-R>=col(".")<CR><C-Q>:set tw=temptw<CR>:unlet temptw<CR>

" Narrow/Widen current paragraph by adjusting the current textwidth
" and using internal formatting (TODO: try out, possibly use other keybindings?):
  map  ,<          :set tw-=2<CR>gqip
  vmap ,<     <esc>:set tw-=2<CR>gvgqgv
  map  ,>          :set tw+=2<CR>gqip
  vmap ,>     <esc>:set tw+=2<CR>gvgqgv

" - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" "tal" is the "trailer alignment" filter program  http://thomasjensen.com/software/tal/
" vmap #t !tal<CR>
  vmap ,tal !tal -p 1<CR>

" Remove <CR> that disturb
  map ,w2u :1,$s/^M//g

"      ,ksr = "kill space runs"
"  substitutes runs of two or more space to a single space:
" nmap ,ksr  :%s/  */ /g
" vmap ,ksr   :s/  */ /g
nmap ,ksr  :%s/  \+/ /g
vmap ,ksr   :s/  \+/ /g
"  nmap <F11> vip:s/  \+/ /g
"  vmap <F11>    :s/  \+/ /g

" Quick insertion of an empty line:
  nmap <CR> O<ESC>

" swap a word with the next word. Works even across punctuation ("abc = def")
" nmap <silent> ,sw "_yiw:s/\(\%#\w\+\)\(\W\+\)\(\w\+\)/\3\2\1/<CR><C-O><C-L>
" Making vim handle word swapping across a newline is fairly straightforward:
  nmap <silent> ,sw    "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><C-O><C-L>

" swap characters:
  nmap <silent> ,sc    xph

"  A map for swapping paragraphs:
  nnoremap ,sp  {dap}p{

" A pair of maps for swapping a word to-the-left and to-the-right:
  nnoremap <silent> ,swl \"_yiw?\w\+\_W\+\%#<CR>:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><C-O><C-L>
  nnoremap <silent> ,swr \"_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><C-O>/\w\+\_W\+<CR><C-L>


"      ,cqel = "clear quoted empty lines"
"       Clears (makes empty) all lines which start with '>'
"       and any amount of following spaces.
" nmap ,cqel :%s/^[> ]*$//
" vmap ,cqel  :s/^[> ]*$//
" nmap ,cqel :%s/^[><C-I> ]\+$//
" vmap ,cqel  :s/^[><C-I> ]\+$//
  nmap ,cqel :%s/^[>]\+$//
  vmap ,cqel  :s/^[><C-I> ]\+$//

"    ,sqz = "squeeze blank lines"
"    Convert all blocks of blank lines (containing whitespace only)
"    into *one* empty line (within current visual):
"  map ,Sbl :g/^\s*$/,/[^ <C-I>]/-j
"  map ,Sbl :g/^\s*$/,/[^ \t]/-j
   map ,sqz :g/^\s*$/,/\S/-j

" Pasting - - - - - - - - - - - - - - - - - - -
"
" Make shift-insert work like in Xterm
  map! <S-Insert> <MiddleMouse>

" Make p in Visual mode replace the selected text with the "" register.
  vnoremap p <Esc>:let current_reg = @"<CR>gvs<C-R>=current_reg<CR><Esc>

" Occasionally I later want already written text parts to put in parenthesis.
" I use the following macro, which brackets previously visually selected text.
" I mapped it with _(. TODO: Check it out.
"  vnoremap _( <ESC>`>a)<ESC>`<i(<ESC>

" map <Alt-a> to fix an indent-broken paste
  imap <silent> <M-A> <ESC>u:set paste<CR>.:set nopaste<CR>gi


" To copy text from one file to a different one
  nmap    _C      :!echo ""> ~/.vi_tmp<CR><CR>:w! ~/.vi_tmp<CR>
  vmap    _C      :w! ~/.vi_tmp<CR>
  nmap    _P      :r ~/.vi_tmp<CR>
  
" }}}
"
" -----------------------------------------------------------------------------
" SCREEN (the program) settings {{{
" -----------------------------------------------------------------------------
"

" Disable the suspend for ^Z.
" I use Vim under "screen" where a suspend would lose the
" connection to the terminal - which is what I want to avoid.
  map <C-Z> :shell

" Ctrl-A is not available when running screen, so map it to ";A"
  map ;A <C-A>

" edit screen-temporary file (exchange)
  map   ## :e /tmp/screen-exchange

" }}}
"
" -----------------------------------------------------------------------------
" MISC OTHER FUNCTIONS/ROUTINES {{{
" -----------------------------------------------------------------------------
"

" Vimfootnotes
"   <Leader>f (in insert mode) - inserts footnotemark
"   <Leader>r (in insert mode) - closes footnote window
  map ,fn :so ~/.vim/macros/vimfootnotes.vim<CR>
  nmap ,fnh :FootnoteComs<CR>		" get help

" A macro which allows you to open a "shell" in a new window 
" - enable it with :vish
  map ,sh :so ~/.vim/macros/vish.vim<CR>

" The following code will add a function heading and position your
" cursor just after Description so that one can document as one proceeds with
" code. TODO: another keybinding?
  function! FileHeading()
    let s:line=line(".")
    call setline(s:line,"/***************************************************")
    call append(s:line,"* Filename:    ")
    call append(s:line+1,"* Description: ")
    call append(s:line+2,"* Author:      Andreas Wagner")
    call append(s:line+3,"* Date:        ".strftime("%b %d %Y"))
    call append(s:line+4,"* *************************************************/")
    unlet s:line
  endfunction
  map ,fh <esc>mz:execute FileHeading()<CR>`zjA

" open url in current line in browser (or current file)
function! Browser ()
  let line = getline (".")
  let line = matchstr (line, "http[^ ]*")
  execute "!opera ".line
" execute "!opera "%:p
endfunction
map ,www :call Browser ()<CR>

" function for bufferlist in statusline - written by Thomas Winkler
  function! GetBufferList()
    let l:numBuffers = bufnr('$')
    let l:i = 0
    let l:bufferList = ''
    while(l:i <= l:numBuffers)
	let l:i = l:i + 1
	" check if buffer is listed
	if(getbufvar(l:i, '&buflisted') == 1)
	    let l:bufName = bufname(l:i)
	    if(strlen(l:bufName))
		if bufwinnr(l:i) != -1
			let l:shortBufName = fnamemodify(l:bufName, ":p:~")
		else
			let l:shortBufName = fnamemodify(l:bufName, ":t")
		endif
		let l:shortBufName = substitute(l:shortBufName, '[][()]', '', 'g')
		" check if buffer is readonly
		if (getbufvar(l:i, '&readonly'))
		    let l:shortBufName = l:shortBufName . '|RO'
		endif
		" check if buffer is currently open in a window
		if bufwinnr(l:i) != -1
		    let l:bufferList = l:bufferList . '[' . l:i . ':' . l:shortBufName . ']*'
		else
		    let l:bufferList = l:bufferList . '|' . l:i . ':' . l:shortBufName . '|'
		endif
		" check if buffer is modified
		if(getbufvar(l:i, '&modified') == 1)
		    let l:bufferList = l:bufferList . '+'
		endif
		let l:bufferList = l:bufferList  . ' '
	    endif
	endif
    endwhile
    return bufferList
  endfunction

" Insert TimeStamp into files - very usefull!
" first add a function that returns a time stamp in the desired format
  if !exists("*TimeStamp")
    fun TimeStamp()
      return "Time-stamp: <" . strftime("%d %b %Y %X") . " Andreas Wagner>"
    endfun
  endif
" this function searches for an existing time stamp and updates it using the
" function declared above
 if !exists("*UpdateTimeStamp")
   fun UpdateTimeStamp()
     if (match(getline(1),"Time-stamp: <.*>")) > 1
       exe "1,1 s/Time-stamp: <.*>/" . TimeStamp()
     endif
   endfun
 endif
" abbreviation to manually enter a timestamp. Just type YTS in insert mode
  iab YTS <C-R>=TimeStamp()<CR>
" add an autocommand to update an existing time stamp when writing the file
" It uses the functions above to replace the time stamp and restores cursor
" position afterwards (this is from the FAQ)
  autocmd BufWritePre,FileWritePre *   ks|call UpdateTimeStamp()|'s
  map ,ts :call UpdateTimeStamp()<CR>

" }}}
"
" =============================================================================
" VIMRC-EDITING {{{
" =============================================================================
"
"
  if has("unix")
    let vimrc='~/.vimrc'
  else
    let vimrc='$VIM\_vimrc'
  endif
  nn  ,r :source <C-R>=vimrc<CR><CR>
  nn  ,ve :edit   <C-R>=vimrc<CR><CR>

" }}}
"
" =============================================================================
" SPELLCHECKING {{{
" =============================================================================
"
"
" I am using vimspell which has been loaded because it's in the plugin
" dir. (for some of the mappings look above at personal variables.)
"
" \sc : write, check and highlight mistakes
" \sA : start Autospell mode
" \sq : stop Autospell mode and return to normal highlighting
" \sl : switch languages
" \sn : move cursor to the next     spelling error
" \sp : move cursos to the previous spelling error
" \sS : insert word into user dict. (case-sensitive)
" \ss : insert word into user dict. (case-insensitive)
" \st : accept for this session only
" \sa : look for alternative spellings of word under cursor


" Second approach: engspchk/gerspchk

" To check the english spelling I use the engspchk.vim
  map ,esp <ESC>:let g:spchklang=eng<CR>:so ~/.vim/macros/engspchk.vim<CR>i

" To check the german spelling I use the modfification thereof: gerspchk.vim
  map ,gsp <ESC>:let g:spchklang=ger<CR>:so ~/.vim/macros/gerspchk.vim<CR>i

" Included Maps:
"  \et : add  word under cursor into database (temporarily - ie. just this file)
"  \es : save word under cursor into database (permanently)  (requires $CVIMSYN)
"  \en : move cursor to the next     spelling error
"  \ep : move cursor to the previous spelling error
"  \ea : look for alternative spellings of word under cursor
" 
" note the variable settings at the bottom of the setttings section above.
" also note that you cannot unload it.

" the final way: run aspell on current file
" map <F7> :!aspell --mode=tex check % <CR> :e!<CR>
  map <F8> :w!<CR>:!aspell --lang=de check %<CR>:e! %<CR>

" }}}
"
" END OF MAPPINGS
"
" }}}
"
" =============================================================================
" MORE DOCUMENTATION {{{
" =============================================================================
"

" =============================================================================
" foldmethod:
"  {Visual}zf => Operator to create a fold
"  zi => enable/disable folds
"  zf => create fold
"  zv => view cursor-line
"  zd => delete one fold at the cursor
"  zD => delete all folds
"  za => toggle fold (open or close)
"  zc => close fold
"  zm => close more folds
"  zM => close all folds: set foldlevel to 0 (zero)
"  zo => open fold
"  zr => open more folds
"  zR => open all folds
"  zx => update folds: close manually opend folds

" =============================================================================
"
"        %               current file name
"        %<              current file name without extension
"        #               alternate file name for current window
"        #<              idem, without extension
"        #31             alternate file number 31
"        #31<            idem, without extension
"        <cword>         word under the cursor
"        <cWORD>         WORD under the cursor (see |WORD|)
"        <cfile>         path name under the cursor
"        <cfile><        idem, without extension
" =============================================================================
"
" Der aktuelle Status von vim, inklusive aller Optionen, der Commandhistory
" und der editierten Dateien, kann mit:
"         :mksession sessiondatei
" in die Datei sessiondatei gesichert werden. Mit dem Aufruf:
"         vim -S sessiondatei
" kann dieser Status restauriert werden, inklusive Cursorposition.

" }}}

" eof
